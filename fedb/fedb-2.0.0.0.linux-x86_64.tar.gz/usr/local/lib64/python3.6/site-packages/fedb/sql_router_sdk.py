# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sql_router_sdk
else:
    import _sql_router_sdk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _sql_router_sdk.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _sql_router_sdk.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _sql_router_sdk.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _sql_router_sdk.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _sql_router_sdk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _sql_router_sdk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _sql_router_sdk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _sql_router_sdk.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _sql_router_sdk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _sql_router_sdk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sql_router_sdk:
_sql_router_sdk.SwigPyIterator_swigregister(SwigPyIterator)

class SQLRouterOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    zk_cluster = property(_sql_router_sdk.SQLRouterOptions_zk_cluster_get, _sql_router_sdk.SQLRouterOptions_zk_cluster_set)
    zk_path = property(_sql_router_sdk.SQLRouterOptions_zk_path_get, _sql_router_sdk.SQLRouterOptions_zk_path_set)
    enbale_debug = property(_sql_router_sdk.SQLRouterOptions_enbale_debug_get, _sql_router_sdk.SQLRouterOptions_enbale_debug_set)
    session_timeout = property(_sql_router_sdk.SQLRouterOptions_session_timeout_get, _sql_router_sdk.SQLRouterOptions_session_timeout_set)

    def __init__(self):
        _sql_router_sdk.SQLRouterOptions_swiginit(self, _sql_router_sdk.new_SQLRouterOptions())
    __swig_destroy__ = _sql_router_sdk.delete_SQLRouterOptions

# Register SQLRouterOptions in _sql_router_sdk:
_sql_router_sdk.SQLRouterOptions_swigregister(SQLRouterOptions)

class ExplainInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_ExplainInfo

    def GetInputSchema(self) -> "::fesql::sdk::Schema const &":
        return _sql_router_sdk.ExplainInfo_GetInputSchema(self)

    def GetOutputSchema(self) -> "::fesql::sdk::Schema const &":
        return _sql_router_sdk.ExplainInfo_GetOutputSchema(self)

    def GetLogicalPlan(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetLogicalPlan(self)

    def GetPhysicalPlan(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetPhysicalPlan(self)

    def GetIR(self) -> "std::string const &":
        return _sql_router_sdk.ExplainInfo_GetIR(self)

# Register ExplainInfo in _sql_router_sdk:
_sql_router_sdk.ExplainInfo_swigregister(ExplainInfo)

class SQLRouter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_SQLRouter

    def ShowDB(self, dbs: "std::vector< std::string,std::allocator< std::string > > *", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_ShowDB(self, dbs, status)

    def CreateDB(self, db: "std::string const &", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_CreateDB(self, db, status)

    def DropDB(self, db: "std::string const &", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_DropDB(self, db, status)

    def ExecuteDDL(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "bool":
        return _sql_router_sdk.SQLRouter_ExecuteDDL(self, db, sql, status)

    def ExecuteInsert(self, *args) -> "bool":
        return _sql_router_sdk.SQLRouter_ExecuteInsert(self, *args)

    def Explain(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< rtidb::sdk::ExplainInfo >":
        return _sql_router_sdk.SQLRouter_Explain(self, db, sql, status)

    def GetRequestRow(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< rtidb::sdk::SQLRequestRow >":
        return _sql_router_sdk.SQLRouter_GetRequestRow(self, db, sql, status)

    def GetInsertRow(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< rtidb::sdk::SQLInsertRow >":
        return _sql_router_sdk.SQLRouter_GetInsertRow(self, db, sql, status)

    def GetInsertRows(self, db: "std::string const &", sql: "std::string const &", status: "Status") -> "std::shared_ptr< rtidb::sdk::SQLInsertRows >":
        return _sql_router_sdk.SQLRouter_GetInsertRows(self, db, sql, status)

    def ExecuteSQL(self, *args) -> "std::shared_ptr< fesql::sdk::ResultSet >":
        return _sql_router_sdk.SQLRouter_ExecuteSQL(self, *args)

    def RefreshCatalog(self) -> "bool":
        return _sql_router_sdk.SQLRouter_RefreshCatalog(self)

# Register SQLRouter in _sql_router_sdk:
_sql_router_sdk.SQLRouter_swigregister(SQLRouter)


def NewClusterSQLRouter(options: "SQLRouterOptions") -> "std::shared_ptr< rtidb::sdk::SQLRouter >":
    return _sql_router_sdk.NewClusterSQLRouter(options)
class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.Status_swiginit(self, _sql_router_sdk.new_Status(*args))
    code = property(_sql_router_sdk.Status_code_get, _sql_router_sdk.Status_code_set)
    msg = property(_sql_router_sdk.Status_msg_get, _sql_router_sdk.Status_msg_set)
    __swig_destroy__ = _sql_router_sdk.delete_Status

# Register Status in _sql_router_sdk:
_sql_router_sdk.Status_swigregister(Status)

kTypeBool = _sql_router_sdk.kTypeBool
kTypeInt16 = _sql_router_sdk.kTypeInt16
kTypeInt32 = _sql_router_sdk.kTypeInt32
kTypeInt64 = _sql_router_sdk.kTypeInt64
kTypeFloat = _sql_router_sdk.kTypeFloat
kTypeDouble = _sql_router_sdk.kTypeDouble
kTypeString = _sql_router_sdk.kTypeString
kTypeDate = _sql_router_sdk.kTypeDate
kTypeTimestamp = _sql_router_sdk.kTypeTimestamp
kTypeUnknow = _sql_router_sdk.kTypeUnknow

def DataTypeName(type: "fesql::sdk::DataType const &") -> "std::string const":
    return _sql_router_sdk.DataTypeName(type)
class Schema(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.Schema_swiginit(self, _sql_router_sdk.new_Schema())
    __swig_destroy__ = _sql_router_sdk.delete_Schema

    def GetColumnCnt(self) -> "int32_t":
        return _sql_router_sdk.Schema_GetColumnCnt(self)

    def GetColumnName(self, index: "uint32_t") -> "std::string const &":
        return _sql_router_sdk.Schema_GetColumnName(self, index)

    def GetColumnType(self, index: "uint32_t") -> "fesql::sdk::DataType const":
        return _sql_router_sdk.Schema_GetColumnType(self, index)

    def IsColumnNotNull(self, index: "uint32_t") -> "bool const":
        return _sql_router_sdk.Schema_IsColumnNotNull(self, index)

# Register Schema in _sql_router_sdk:
_sql_router_sdk.Schema_swigregister(Schema)

class Table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.Table_swiginit(self, _sql_router_sdk.new_Table())
    __swig_destroy__ = _sql_router_sdk.delete_Table

    def GetName(self) -> "std::string const &":
        return _sql_router_sdk.Table_GetName(self)

    def GetCatalog(self) -> "std::string const &":
        return _sql_router_sdk.Table_GetCatalog(self)

    def GetCreateTime(self) -> "uint64_t":
        return _sql_router_sdk.Table_GetCreateTime(self)

    def GetSchema(self) -> "std::shared_ptr< fesql::sdk::Schema > const":
        return _sql_router_sdk.Table_GetSchema(self)

# Register Table in _sql_router_sdk:
_sql_router_sdk.Table_swigregister(Table)

class TableSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sql_router_sdk.TableSet_swiginit(self, _sql_router_sdk.new_TableSet())
    __swig_destroy__ = _sql_router_sdk.delete_TableSet

    def Next(self) -> "bool":
        return _sql_router_sdk.TableSet_Next(self)

    def GetTable(self) -> "std::shared_ptr< fesql::sdk::Table > const":
        return _sql_router_sdk.TableSet_GetTable(self)

    def Size(self) -> "int32_t":
        return _sql_router_sdk.TableSet_Size(self)

# Register TableSet in _sql_router_sdk:
_sql_router_sdk.TableSet_swigregister(TableSet)

class Date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_sql_router_sdk.Date_year_get, _sql_router_sdk.Date_year_set)
    month = property(_sql_router_sdk.Date_month_get, _sql_router_sdk.Date_month_set)
    day = property(_sql_router_sdk.Date_day_get, _sql_router_sdk.Date_day_set)

    def __init__(self):
        _sql_router_sdk.Date_swiginit(self, _sql_router_sdk.new_Date())
    __swig_destroy__ = _sql_router_sdk.delete_Date

# Register Date in _sql_router_sdk:
_sql_router_sdk.Date_swigregister(Date)

class ResultSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sql_router_sdk.delete_ResultSet

    def Reset(self) -> "bool":
        return _sql_router_sdk.ResultSet_Reset(self)

    def Next(self) -> "bool":
        return _sql_router_sdk.ResultSet_Next(self)

    def GetString(self, index: "uint32_t", val: "std::string *") -> "bool":
        return _sql_router_sdk.ResultSet_GetString(self, index, val)

    def GetStringUnsafe(self, index: "int") -> "std::string":
        return _sql_router_sdk.ResultSet_GetStringUnsafe(self, index)

    def GetAsString(self, idx: "uint32_t") -> "std::string const":
        return _sql_router_sdk.ResultSet_GetAsString(self, idx)

    def GetRowString(self) -> "std::string":
        return _sql_router_sdk.ResultSet_GetRowString(self)

    def GetBool(self, index: "uint32_t", result: "bool *") -> "bool":
        return _sql_router_sdk.ResultSet_GetBool(self, index, result)

    def GetBoolUnsafe(self, index: "int") -> "bool":
        return _sql_router_sdk.ResultSet_GetBoolUnsafe(self, index)

    def GetChar(self, index: "uint32_t", result: "char *") -> "bool":
        return _sql_router_sdk.ResultSet_GetChar(self, index, result)

    def GetCharUnsafe(self, index: "int") -> "char":
        return _sql_router_sdk.ResultSet_GetCharUnsafe(self, index)

    def GetInt16(self, index: "uint32_t", result: "int16_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetInt16(self, index, result)

    def GetInt16Unsafe(self, index: "int") -> "short":
        return _sql_router_sdk.ResultSet_GetInt16Unsafe(self, index)

    def GetInt32(self, index: "uint32_t", result: "int32_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetInt32(self, index, result)

    def GetInt32Unsafe(self, index: "int") -> "int":
        return _sql_router_sdk.ResultSet_GetInt32Unsafe(self, index)

    def GetInt64(self, index: "uint32_t", result: "int64_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetInt64(self, index, result)

    def GetInt64Unsafe(self, index: "int") -> "int64_t":
        return _sql_router_sdk.ResultSet_GetInt64Unsafe(self, index)

    def GetFloat(self, index: "uint32_t", result: "float *") -> "bool":
        return _sql_router_sdk.ResultSet_GetFloat(self, index, result)

    def GetFloatUnsafe(self, index: "int") -> "float":
        return _sql_router_sdk.ResultSet_GetFloatUnsafe(self, index)

    def GetDouble(self, index: "uint32_t", result: "double *") -> "bool":
        return _sql_router_sdk.ResultSet_GetDouble(self, index, result)

    def GetDoubleUnsafe(self, index: "int") -> "double":
        return _sql_router_sdk.ResultSet_GetDoubleUnsafe(self, index)

    def GetDate(self, *args) -> "bool":
        return _sql_router_sdk.ResultSet_GetDate(self, *args)

    def GetStructDateUnsafe(self, index: "int32_t") -> "fesql::sdk::Date":
        return _sql_router_sdk.ResultSet_GetStructDateUnsafe(self, index)

    def GetDateUnsafe(self, index: "uint32_t") -> "int32_t":
        return _sql_router_sdk.ResultSet_GetDateUnsafe(self, index)

    def GetTime(self, index: "uint32_t", mills: "int64_t *") -> "bool":
        return _sql_router_sdk.ResultSet_GetTime(self, index, mills)

    def GetTimeUnsafe(self, index: "int") -> "int64_t":
        return _sql_router_sdk.ResultSet_GetTimeUnsafe(self, index)

    def GetSchema(self) -> "fesql::sdk::Schema const *":
        return _sql_router_sdk.ResultSet_GetSchema(self)

    def IsNULL(self, index: "int") -> "bool":
        return _sql_router_sdk.ResultSet_IsNULL(self, index)

    def Size(self) -> "int32_t":
        return _sql_router_sdk.ResultSet_Size(self)

# Register ResultSet in _sql_router_sdk:
_sql_router_sdk.ResultSet_swigregister(ResultSet)

class SQLRequestRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sql_router_sdk.SQLRequestRow_swiginit(self, _sql_router_sdk.new_SQLRequestRow(*args))
    __swig_destroy__ = _sql_router_sdk.delete_SQLRequestRow

    def Init(self, str_length: "int32_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_Init(self, str_length)

    def AppendBool(self, val: "bool") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendBool(self, val)

    def AppendInt32(self, val: "int32_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendInt32(self, val)

    def AppendInt16(self, val: "int16_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendInt16(self, val)

    def AppendInt64(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendInt64(self, val)

    def AppendTimestamp(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendTimestamp(self, val)

    def AppendDate(self, *args) -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendDate(self, *args)

    def AppendFloat(self, val: "float") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendFloat(self, val)

    def AppendDouble(self, val: "double") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendDouble(self, val)

    def AppendString(self, val: "std::string const &") -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendString(self, val)

    def AppendNULL(self) -> "bool":
        return _sql_router_sdk.SQLRequestRow_AppendNULL(self)

    def Build(self) -> "bool":
        return _sql_router_sdk.SQLRequestRow_Build(self)

    def OK(self) -> "bool":
        return _sql_router_sdk.SQLRequestRow_OK(self)

    def GetRow(self) -> "std::string const &":
        return _sql_router_sdk.SQLRequestRow_GetRow(self)

    def GetSchema(self) -> "std::shared_ptr< fesql::sdk::Schema > const":
        return _sql_router_sdk.SQLRequestRow_GetSchema(self)

# Register SQLRequestRow in _sql_router_sdk:
_sql_router_sdk.SQLRequestRow_swigregister(SQLRequestRow)


def ConvertType(type: "::rtidb::type::DataType") -> "::fesql::sdk::DataType":
    return _sql_router_sdk.ConvertType(type)
class SQLInsertRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, table_info: "std::shared_ptr< ::rtidb::nameserver::TableInfo >", schema: "std::shared_ptr< fesql::sdk::Schema >", default_map: "rtidb::sdk::DefaultValueMap", default_str_length: "uint32_t"):
        _sql_router_sdk.SQLInsertRow_swiginit(self, _sql_router_sdk.new_SQLInsertRow(table_info, schema, default_map, default_str_length))
    __swig_destroy__ = _sql_router_sdk.delete_SQLInsertRow

    def Init(self, str_length: "int") -> "bool":
        return _sql_router_sdk.SQLInsertRow_Init(self, str_length)

    def AppendBool(self, val: "bool") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendBool(self, val)

    def AppendInt32(self, val: "int32_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendInt32(self, val)

    def AppendInt16(self, val: "int16_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendInt16(self, val)

    def AppendInt64(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendInt64(self, val)

    def AppendTimestamp(self, val: "int64_t") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendTimestamp(self, val)

    def AppendFloat(self, val: "float") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendFloat(self, val)

    def AppendDouble(self, val: "double") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendDouble(self, val)

    def AppendString(self, val: "std::string const &") -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendString(self, val)

    def AppendDate(self, *args) -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendDate(self, *args)

    def AppendNULL(self) -> "bool":
        return _sql_router_sdk.SQLInsertRow_AppendNULL(self)

    def IsComplete(self) -> "bool":
        return _sql_router_sdk.SQLInsertRow_IsComplete(self)

    def GetDimensions(self) -> "std::vector< std::pair< std::string,uint32_t >,std::allocator< std::pair< std::string,uint32_t > > > const &":
        return _sql_router_sdk.SQLInsertRow_GetDimensions(self)

    def GetTs(self) -> "std::vector< uint64_t,std::allocator< uint64_t > > const &":
        return _sql_router_sdk.SQLInsertRow_GetTs(self)

    def GetRow(self) -> "std::string const &":
        return _sql_router_sdk.SQLInsertRow_GetRow(self)

    def GetSchema(self) -> "std::shared_ptr< fesql::sdk::Schema > const":
        return _sql_router_sdk.SQLInsertRow_GetSchema(self)

# Register SQLInsertRow in _sql_router_sdk:
_sql_router_sdk.SQLInsertRow_swigregister(SQLInsertRow)

class SQLInsertRows(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, table_info: "std::shared_ptr< ::rtidb::nameserver::TableInfo >", schema: "std::shared_ptr< fesql::sdk::Schema >", default_map: "rtidb::sdk::DefaultValueMap", str_size: "uint32_t"):
        _sql_router_sdk.SQLInsertRows_swiginit(self, _sql_router_sdk.new_SQLInsertRows(table_info, schema, default_map, str_size))
    __swig_destroy__ = _sql_router_sdk.delete_SQLInsertRows

    def NewRow(self) -> "std::shared_ptr< rtidb::sdk::SQLInsertRow >":
        return _sql_router_sdk.SQLInsertRows_NewRow(self)

    def GetCnt(self) -> "uint32_t":
        return _sql_router_sdk.SQLInsertRows_GetCnt(self)

    def GetRow(self, i: "uint32_t") -> "std::shared_ptr< rtidb::sdk::SQLInsertRow >":
        return _sql_router_sdk.SQLInsertRows_GetRow(self, i)

# Register SQLInsertRows in _sql_router_sdk:
_sql_router_sdk.SQLInsertRows_swigregister(SQLInsertRows)



